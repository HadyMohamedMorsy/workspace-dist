import { AssignGeneralOffer } from "src/assignes-global-offers/assignes-general-offer.entity";
import { AssignesMembership } from "src/assignes-memberships/assignes-membership.entity";
import { AssignesPackages } from "src/assigness-packages-offers/assignes-packages.entity";
import { ExpensePlaceChild } from "src/expenses-place/expenses-place-child/expense-place-child.entity";
import { ExpenseSalaries } from "src/expenses-salary/expense-salaries.entity";
import { Order } from "src/orders/order.entity";
import { Purchases } from "src/purchases/purchases.entity";
import { Deskarea } from "src/reservations/deskarea/deskarea.entity";
import { ReservationRoom } from "src/reservations/rooms/reservation-room.entity";
import { Shared } from "src/reservations/shared/shared.entity";
import { Returns } from "src/returns/returns.entity";
import { RevenueChild } from "src/revenue/revenue-child/revenue-child.entity";
import { Repository } from "typeorm";
import { FiltersDashboredDto } from "./dto/filter-dashbored.dto";
export declare class DahboredService {
    private readonly expensePlaceChildRepository;
    private readonly revenueChildRepository;
    private readonly expenseSalariesRepository;
    private readonly purchasesRepository;
    private readonly returnsRepository;
    private readonly orderRepository;
    private readonly packagesRepository;
    private readonly membershipRepository;
    private readonly generalOfferRepository;
    private readonly sharedRepository;
    private readonly deskAreaRepository;
    private readonly reservationRoomRepository;
    constructor(expensePlaceChildRepository: Repository<ExpensePlaceChild>, revenueChildRepository: Repository<RevenueChild>, expenseSalariesRepository: Repository<ExpenseSalaries>, purchasesRepository: Repository<Purchases>, returnsRepository: Repository<Returns>, orderRepository: Repository<Order>, packagesRepository: Repository<AssignesPackages>, membershipRepository: Repository<AssignesMembership>, generalOfferRepository: Repository<AssignGeneralOffer>, sharedRepository: Repository<Shared>, deskAreaRepository: Repository<Deskarea>, reservationRoomRepository: Repository<ReservationRoom>);
    getAllExapsesInternalSallary(filter: FiltersDashboredDto): Promise<any>;
    getAllExapsesExternalSallary(filter: FiltersDashboredDto): Promise<any>;
    getAllExapsesPlace(filter: FiltersDashboredDto): Promise<any>;
    getAllExapsesInsurance(filter: FiltersDashboredDto): Promise<any>;
    getAllExapsesSystemFees(filter: FiltersDashboredDto): Promise<any>;
    getAllExapsesRents(filter: FiltersDashboredDto): Promise<any>;
    getAllExapsesElectricityBills(filter: FiltersDashboredDto): Promise<any>;
    getAllExapsesBonuses(filter: FiltersDashboredDto): Promise<any>;
    getAllExapsesAssetsPurchased(filter: FiltersDashboredDto): Promise<any>;
    getAllExapsesKitchenCost(filter: FiltersDashboredDto): Promise<any>;
    getAllExapsesCoursesCost(filter: FiltersDashboredDto): Promise<any>;
    getAllExapsesCharteredAccountantFees(filter: FiltersDashboredDto): Promise<any>;
    getAllExapsesLoans(filter: FiltersDashboredDto): Promise<any>;
    getAllExapsesOther(filter: FiltersDashboredDto): Promise<any>;
    getAllCountPurshases(filter: FiltersDashboredDto): Promise<any>;
    getAllRevenueVirtualOfficeIncome(filter: FiltersDashboredDto): Promise<any>;
    getAllRevenueOfficesIncome(filter: FiltersDashboredDto): Promise<any>;
    getAllRevenueStoresIncome(filter: FiltersDashboredDto): Promise<any>;
    getAllRevenuePrintIncome(filter: FiltersDashboredDto): Promise<any>;
    getAllRevenueLockerIncome(filter: FiltersDashboredDto): Promise<any>;
    getAllRevenueExtraInternetIncome(filter: FiltersDashboredDto): Promise<any>;
    getAllRevenueCoursesIncome(filter: FiltersDashboredDto): Promise<any>;
    getAllRevenueCoursesNetProfit(filter: FiltersDashboredDto): Promise<any>;
    getAllRevenueElectronicIncomeInvoices(filter: FiltersDashboredDto): Promise<any>;
    getAllRevenueElectronicExpensesInvoices(filter: FiltersDashboredDto): Promise<any>;
    getAllRevenueOther(filter: FiltersDashboredDto): Promise<any>;
    getTotalRevenueByStatus(repository: any, status: string, filter: FiltersDashboredDto, entityName: string): Promise<any>;
    getAllTotalHours(repository: any, status: string, filter: FiltersDashboredDto, entityName: string): Promise<any>;
    getAllTotalHourSharedCompleted(filter: FiltersDashboredDto): Promise<any>;
    getAllTotalHourDeskareaCompleted(filter: FiltersDashboredDto): Promise<any>;
    getAllTotalHourReservationRoomCompleted(filter: FiltersDashboredDto): Promise<any>;
    getAllTotalPackages(filter: FiltersDashboredDto): Promise<any>;
    getAllTotalCancelledPackages(filter: FiltersDashboredDto): Promise<any>;
    getAllTotalActivePackages(filter: FiltersDashboredDto): Promise<any>;
    getAllTotalDeal(filter: FiltersDashboredDto): Promise<any>;
    getAllTotalCancelledDeal(filter: FiltersDashboredDto): Promise<any>;
    getAllTotalActiveDeal(filter: FiltersDashboredDto): Promise<any>;
    getAllTotalShared(filter: FiltersDashboredDto): Promise<any>;
    getAllTotalCancelledShared(filter: FiltersDashboredDto): Promise<any>;
    getAllTotalActiveShared(filter: FiltersDashboredDto): Promise<any>;
    getAllTotalDeskArea(filter: FiltersDashboredDto): Promise<any>;
    getAllTotalCancelledDeskArea(filter: FiltersDashboredDto): Promise<any>;
    getAllTotalActiveDeskArea(filter: FiltersDashboredDto): Promise<any>;
    getAllTotalReservationRoom(filter: FiltersDashboredDto): Promise<any>;
    getAllTotalCancelledReservationRoom(filter: FiltersDashboredDto): Promise<any>;
    getAllTotalActiveReservationRoom(filter: FiltersDashboredDto): Promise<any>;
    getAllTotalMemberShip(filter: FiltersDashboredDto): Promise<any>;
    getAllTotalCancelledMemberShip(filter: FiltersDashboredDto): Promise<any>;
    getAllTotalActiveMemberShip(filter: FiltersDashboredDto): Promise<any>;
    getAllTotalOffer(filter: FiltersDashboredDto): Promise<any>;
    getAllCountReturns(filter: FiltersDashboredDto): Promise<any>;
    getTotalReturns(filter: FiltersDashboredDto): Promise<any>;
    getTotalPurshases(filter: FiltersDashboredDto): Promise<any>;
    getCountPaidOrders(filter: FiltersDashboredDto): Promise<any>;
    getCountCostOrders(filter: FiltersDashboredDto): Promise<any>;
    getCountFreeOrders(filter: FiltersDashboredDto): Promise<any>;
    getCountHoldOrders(filter: FiltersDashboredDto): Promise<any>;
    getTotalPaidOrders(filter: FiltersDashboredDto): Promise<any>;
    getTotalCostOrders(filter: FiltersDashboredDto): Promise<any>;
    getTotalHoldOrders(filter: FiltersDashboredDto): Promise<any>;
    getTotalOrderPriceOrders(filter: FiltersDashboredDto): Promise<any>;
}
